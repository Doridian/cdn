'use strict';

const crypto = require('crypto');

const SHA256_EMPTY = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
const AWS_ACCESS_KEY_ID = '{{ decrypt(config.objectStorage.accessKeyID) }}';
const AWS_SECRET_ACCESS_KEY = '{{ decrypt(config.objectStorage.secretAccessKey) }}';
const AWS_REGION = 'us-west-2';
const AWS_HOST = 's3.amazonaws.com';

let cachedSigningKeyDate = '';
let cachedSigningKeyValue = '';

function make_amz_date(req) {
    const now = new Date();
    return now.toISOString().replace(/\.\d{3}Z/, 'Z').replace(/[-:.]/g, '');
}

function make_amz_content_sha256(req) {
    return SHA256_EMPTY;
}

function hash_request(req) {
    const yyyymmddDate = req.variables.amz_date.split('T')[0];
    const signedHeaders = 'host;x-amz-content-sha256;x-amz-date';

    const canonicalRequest = `GET
${req.variables.key}

host:${req.variables.bucket}.${AWS_HOST}
x-amz-content-sha256:${req.variables.amz_content_sha256}
x-amz-date:${req.variables.amz_date}

${signedHeaders}
${req.variables.amz_content_sha256}`;

    const regionString = `${yyyymmddDate}/${AWS_REGION}/s3/aws4_request`;

    const stringToSign = `AWS4-HMAC-SHA256
${req.variables.amz_date}
${regionString}
${crypto.createHash('sha256').update(canonicalRequest).digest('hex')}`;

    let signingKey = cachedSigningKeyValue;
    if (yyyymmddDate !== cachedSigningKeyDate) {
        const dateKey = crypto.createHmac('sha256', `AWS4${AWS_SECRET_ACCESS_KEY}`).update(yyyymmddDate).digest();
        const dateRegionKey = crypto.createHmac('sha256', dateKey).update(AWS_REGION).digest();
        const dateRegionServiceKey = crypto.createHmac('sha256', dateRegionKey).update('s3').digest();
        signingKey = crypto.createHmac('sha256', dateRegionServiceKey).update('aws4_request').digest();
        
        cachedSigningKeyValue = signingKey;
        cachedSigningKeyDate = yyyymmddDate;
    }

    return `AWS4-HMAC-SHA256 Credential=${AWS_ACCESS_KEY_ID}/${regionString},SignedHeaders=${signedHeaders},Signature=${crypto.createHmac('sha256', signingKey).update(stringToSign).digest('hex')}`;
}

/*
const r = {};
r.variables = {};
const v = r.variables;
v.amz_date = make_amz_date(r);
v.key = '/meow';
v.bucket = 'pawnode-crypto';
v.amz_content_sha256 = make_amz_content_sha256(r);
console.log(`curl -v 'https://${v.bucket}.${AWS_HOST}${v.key}' -H 'Authorization: ${hash_request(r)}' -H 'x-amz-date: ${v.amz_date}' -H 'x-amz-content-sha256: ${v.amz_content_sha256}'`);
*/
