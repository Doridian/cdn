router id {{ dynConfig._self.routerId }};

protocol device {
        scan time 30;
}

protocol direct {
        interface "ens*";
        interface "eno*";
        interface "eth*";
}

filter bgp_out {
        if net = 0.0.0.0/0 then {
                reject;
        } else if source ~ [ RTS_STATIC_DEVICE, RTS_STATIC ] then {
                accept;
        }
        reject;
}

protocol kernel {
        metric 64;      # Use explicit kernel route metric to avoid collisions
                        # with non-BIRD routes in the kernel routing table
        import none;
        export filter bgp_out;
        # Actually insert routes into the kernel routing table
}

{% for tag in tags if tag in dynConfig %}
    {% set cfg = dynConfig[tag] %}
    {% if 'neighbors' in cfg %}
        {% for neighbor in cfg.neighbors if 'ip4' in neighbor %}
            protocol bgp {{ neighbor.name }} {
                    local as 207618;
                    neighbor {{ neighbor.ip4 }} as {{ neighbor.as }};
                    {% if 'multihop' in neighbor %}
                    multihop {{ neighbor.multihop }};
                    {% endif %}
                    {% if 'password' in neighbor %}
                    password "{{ neighbor.password }}";
                    {% endif %}
                    next hop self;
                    import all;
                    export filter bgp_out;
            }
        {% endfor %}
    {% endif %}
{% endfor %}

protocol static {
        export all;

{% for tag in tags if tag in dynConfig %}
    {% set cfg = dynConfig[tag] %}
    {% if 'subnets4' in cfg %}
        {% for sn in cfg.subnets4 %}
            route {{ sn }} unreachable;
        {% endfor %}
    {% endif %}
{% endfor %}

}
