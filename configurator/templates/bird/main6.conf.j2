router id {{ dynConfig._self.primaryIp }};

protocol device {
        scan time 30;
}

protocol direct {
        interface "ens*";
        interface "eno*";
        interface "eth*";
}

filter bgp_out {
        if net = ::0/0 then {
                reject;
        } else if source ~ [ RTS_STATIC_DEVICE, RTS_STATIC ] then {
                accept;
        }
        reject;
}

filter bgp_defroute_only {
        if net = ::0/0 then {
                accept;
        } else if source ~ [ RTS_STATIC_DEVICE, RTS_STATIC ] then {
                accept;
        }
        reject;
}

filter bgp_in {
        if net = ::0/0 then {
                reject;
        }
        accept;
}

protocol kernel {
        metric 64;      # Use explicit kernel route metric to avoid collisions
                        # with non-BIRD routes in the kernel routing table
        import none;
        export none;
        kernel table 666;
}

{%- for tag in tags if tag in dynConfig %}
    {%- set cfg = dynConfig[tag] %}
    {%- if 'neighbors' in cfg %}
        {%- for neighbor in cfg.neighbors if 'ip6' in neighbor %}
protocol bgp {{ neighbor.name }} {
        local as 207618;
        neighbor {{ neighbor.ip6 }} as {{ neighbor.as }};
                {%- if 'multihop' in neighbor %}
        multihop {{ neighbor.multihop }};
                {%- endif %}
                {%- if 'password' in neighbor %}
        password "{{ decrypt(neighbor.password) }}";
                {%- endif %}
        next hop self;
{%- if neighbor.mode == 'out' %}
        export all;
        import filter bgp_in;
{%- elif neighbor.mode == 'defgw' %}
        export filter bgp_defroute_only;
        import filter bgp_in;
{%- elif neighbor.mode == 'out_no_fetch' %}
        export filter bgp_out;
        import filter bgp_defroute_only;
{%- else %}
        import all;
        export filter bgp_out;
{%- endif %}
}
        {%- endfor %}
    {%- endif %}
{%- endfor %}

protocol static {
        export all;

        route ::0/0 unreachable;

{%- for tag in tags if tag in dynConfig %}
    {%- set cfg = dynConfig[tag] %}
    {%- if 'subnets6' in cfg %}
        {%- for sn in cfg.subnets6 %}
        route {{ sn }} unreachable;
        {%- endfor %}
    {%- endif %}
{%- endfor %}

}
